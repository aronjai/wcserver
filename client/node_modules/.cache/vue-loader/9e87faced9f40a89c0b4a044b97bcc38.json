{"remainingRequest":"C:\\pro2\\wcserver_final\\webapp_project\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\pro2\\wcserver_final\\webapp_project\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\pro2\\wcserver_final\\webapp_project\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\pro2\\wcserver_final\\webapp_project\\client\\src\\views\\news.vue?vue&type=template&id=225d8f26&","dependencies":[{"path":"C:\\pro2\\wcserver_final\\webapp_project\\client\\src\\views\\news.vue","mtime":1585414630000},{"path":"C:\\pro2\\wcserver_final\\webapp_project\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1585374002000},{"path":"C:\\pro2\\wcserver_final\\webapp_project\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1585375098000},{"path":"C:\\pro2\\wcserver_final\\webapp_project\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1585374002000},{"path":"C:\\pro2\\wcserver_final\\webapp_project\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1585375094000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}